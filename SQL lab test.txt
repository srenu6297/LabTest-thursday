1.Create Table

a.Write a SQL statement to create a table named jobs including columns job_id,
 job_title, min_salary, max_salary and check whether the max_salary amount exceeding the upper limit 25000.


solution=>
	mysql> create table jobs (job_id int primary key,job_title varchar(50), min_salary bigint ,max_salary bigint 
	check (max_salary> 25000));
	Query OK, 0 rows affected (0.04 sec)

	mysql> desc jobs;
	+------------+-------------+------+-----+---------+-------+
	| Field      | Type        | Null | Key | Default | Extra |
	+------------+-------------+------+-----+---------+-------+
	| job_id     | int         | NO   | PRI | NULL    |       |
	| job_title  | varchar(50) | YES  |     | NULL    |       |
	| min_salary | bigint      | YES  |     | NULL    |       |
	| max_salary | bigint      | YES  |     | NULL    |       |
	+------------+-------------+------+-----+---------+-------+
	4 rows in set (0.00 sec)
	

b. Write a SQL statement to create a table named countries including columns country_id, 
country_name and region_id and make sure that no countries except Italy, India and China 
will be entered in the table.


solution=>
	mysql> create table countries (country_id varchar(12) primary key,country_name enum('india','italy','china')not null,
	region_id varchar(3) not null);
	Query OK, 0 rows affected (0.02 sec)

	mysql> desc countries;
	+--------------+-------------------------------+------+-----+---------+-------+
	| Field        | Type                          | Null | Key | Default | Extra |
	+--------------+-------------------------------+------+-----+---------+-------+
	| country_id   | varchar(12)                   | NO   | PRI | NULL    |       |
	| country_name | enum('india','italy','china') | NO   |     | NULL    |       |
	| region_id    | varchar(3)                    | NO   |     | NULL    |       |
	+--------------+-------------------------------+------+-----+---------+-------+
	3 rows in set (0.00 sec)


	



c.Write a SQL statement to create a table job_history including columns employee_id, start_date, end_date,
 job_id and department_id and make sure that, the employee_id column does not contain any duplicate value 
at the time of insertion  .



Solution=>
	mysql> create table job_history(employee_id int primary key,start_date date not null,end_date date not null,job_id int 
	not null,department_id varchar(10) not null);
	Query OK, 0 rows affected (0.03 sec)

	mysql> desc job_history;
	+---------------+-------------+------+-----+---------+-------+
	| Field         | Type        | Null | Key | Default | Extra |
	+---------------+-------------+------+-----+---------+-------+
	| employee_id   | int         | NO   | PRI | NULL    |       |
	| start_date    | date        | NO   |     | NULL    |       |
	| end_date      | date        | NO   |     | NULL    |       |
	| job_id        | int         | NO   |     | NULL    |       |
	| department_id | varchar(10) | NO   |     | NULL    |       |
	+---------------+-------------+------+-----+---------+-------+
	5 rows in set (0.00 sec)





2.Alter Table

a.Write a SQL statement to add a foreign key constraint named fk_job_id on job_id column of 
job_history table referencing to the primary key job_id of jobs table.


Solution=>
	mysql> alter table job_history add constraint fk_job_id foreign key(job_id) references jobs(job_id);
	Query OK, 0 rows affected (0.08 sec)
	Records: 0  Duplicates: 0  Warnings: 0
	
	mysql> desc job_history;
	+---------------+-------------+------+-----+---------+-------+
	| Field         | Type        | Null | Key | Default | Extra |
	+---------------+-------------+------+-----+---------+-------+
	| employee_id   | int         | NO   | PRI | NULL    |       |
	| start_date    | date        | NO   |     | NULL    |       |
	| end_date      | date        | NO   |     | NULL    |       |
	| job_id        | int         | NO   | MUL | NULL    |       |
	| department_id | varchar(10) | NO   |     | NULL    |       |
	+---------------+-------------+------+-----+---------+-------+
	5 rows in set (0.00 sec)

	


b.Write a SQL statement to rename the table countries to country_new.

Solution=>
	
	mysql> alter table countries rename to country_new;
	Query OK, 0 rows affected (0.02 sec)

	mysql> desc country_new;
	+--------------+-------------------------------+------+-----+---------+-------+
	| Field        | Type                          | Null | Key | Default | Extra |
	+--------------+-------------------------------+------+-----+---------+-------+
	| country_id   | varchar(12)                   | NO   | PRI | NULL    |       |
	| country_name | enum('india','italy','china') | NO   |     | NULL    |       |
	| region_id    | varchar(3)                    | NO   |     | NULL    |       |
	+--------------+-------------------------------+------+-----+---------+-------+
	3 rows in set (0.00 sec)
	

c.Write a SQL statement to change the name of the column country_id to con_id, 
keeping the data type and size same.

Solution=>
	mysql> alter table country_new change column country_id con_id varchar(12);
	Query OK, 0 rows affected (0.02 sec)
	Records: 0  Duplicates: 0  Warnings: 0

	mysql> desc country_new;
	+--------------+-------------------------------+------+-----+---------+-------+
	| Field        | Type                          | Null | Key | Default | Extra |
	+--------------+-------------------------------+------+-----+---------+-------+
	| con_id       | varchar(12)                   | NO   | PRI | NULL    |       |
	| country_name | enum('india','italy','china') | NO   |     | NULL    |       |
	| region_id    | varchar(3)                    | NO   |     | NULL    |       |
	+--------------+-------------------------------+------+-----+---------+-------+
	3 rows in set (0.00 sec)



3.DML Statement

a.Write a SQL statement to insert a record with your own value into the table countries against each columns.

|
Solution=>
	mysql> insert into country_new values('+91','india','IN');
	Query OK, 1 row affected (0.00 sec)

	mysql> insert into country_new values('+39','italy','IT');
	Query OK, 1 row affected (0.00 sec)

	mysql> insert into country_new values('+86','china','CN');
	Query OK, 1 row affected (0.00 sec)

	mysql> select * from country_new;
	+--------+--------------+-----------+
	| con_id | country_name | region_id |
	+--------+--------------+-----------+
	| +39    | italy        | IT        |
	| +86    | china        | CN        |
	| +91    | india        | IN        |
	+--------+--------------+-----------+
	3 rows in set (0.00 sec)




b.Write a SQL statement to insert 5 rows by a single insert statement into jobs table.

Here is the sample table jobs.

JOB_ID     | JOB_TITLE                       | MIN_SALARY | MAX_SALARY |
+------------+---------------------------------+------------+------------+
| AD_PRES    | President                       |      20000 |      40000 |
| AD_VP      | Administration Vice President   |      15000 |      30000 |
| AD_ASST    | Administration Assistant        |       3000 |       6000 |
| FI_MGR     | Finance Manager                 |       8200 |      16000 |
| FI_ACCOUNT | Accountant                      |       4200 |       9000 |
| AC_MGR     | Accounting Manager              |       8200 |      16000 |
| AC_ACCOUNT | Public Accountant               |       4200 |       9000 |
| SA_MAN     | Sales Manager                   |      10000 |      20000 |
| SA_REP     | Sales Representative            |       6000 |      12000 |
| PU_MAN     | Purchasing Manager              |       8000 |      15000 |
| PU_CLERK   | Purchasing Clerk                |       2500 |       5500 |
| ST_MAN     | Stock Manager                   |       5500 |       8500 |
| ST_CLERK   | Stock Clerk                     |       2000 |       5000 |
| SH_CLERK   | Shipping Clerk                  |       2500 |       5500 |
| IT_PROG    | Programmer                      |       4000 |      10000 |
| MK_MAN     | Marketing Manager               |       9000 |      15000 |
| MK_REP     | Marketing Representative        |       4000 |       9000 |
| HR_REP     | Human Resources Representative  |       4000 |       9000 |
| PR_REP     | Public Relations Representative |       4500 |      10500 |
+------------+---------------------------------+-- 





Solution=>
	mysql> insert into jobs values(10001,'java developer',10000,40000),(10002,'python developer',8000,39000),
	(10003,'Artificial intelligence engineer',20000,80000),(10004,'Software engineer',15000,50000),(10005,'Account manager',16000,70000);
	Query OK, 5 rows affected (0.01 sec)
	Records: 5  Duplicates: 0  Warnings: 0

	mysql> select * from jobs;
	+--------+----------------------------------+------------+------------+
	| job_id | job_title                        | min_salary | max_salary |
	+--------+----------------------------------+------------+------------+
	|  10001 | java developer                   |      10000 |      40000 |
	|  10002 | python developer                 |       8000 |      39000 |
	|  10003 | Artificial intelligence engineer |      20000 |      80000 |
	|  10004 | Software engineer                |      15000 |      50000 |
	|  10005 | Account manager                  |      16000 |      70000 |
	+--------+----------------------------------+------------+------------+
	5 rows in set (0.00 sec)




c.Write a SQL statement to change Min_salary  to 8000 and max_Salary to 40000 for programmer.

Solution=>
	mysql> update  jobs set min_salary =8000 ,max_salary=40000 where job_id=10005;
	Query OK, 1 row affected (0.00 sec)
	Rows matched: 1  Changed: 1  Warnings: 0

	mysql> select * from jobs;
	+-------------+----------------------------------+------------+------------+
	| job_id      | job_title                        | min_salary | max_salary |
	+-------------+----------------------------------+------------+------------+
	|  10001 | java developer                        |      10000 |      40000 |
	|  10002 | python developer                      |       8000 |      39000 |
	|  10003 | Artificial intelligence engineer 	 |      20000 |      80000 |
	|  10004 | Software engineer               	 |      15000 |      50000 |
	|  10005 | Account manager                 	 |       8000 |      40000 |
	+--------+---------------------------------------+------------+------------+	
	5 rows in set (0.00 sec)